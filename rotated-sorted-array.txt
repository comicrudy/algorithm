#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <string.h>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <functional>
#include <utility>
#include <set>


using namespace std;

/*
    Suppose a sorted array is rotated at some pivot unknown to you beforehand. (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). 
    How do you find an element in the rotated array efficiently? You may assume no duplicate exists in the array.
*/

int searchV(vector<int>& V, int target, int s, int e){
    if(s > e)
        return -1;
    else if(s == e){
        if(V[s] != target)
            return -1;
        else {
            return s;
        }
    } 
    else if(s + 1 == e){
        if(V[s] != target && V[e] != target)
            return -1;
        else {
            return (V[s] == target) ? s : e;
        }
    }  
    else {
        int median = (int)(s + (e - s)/2);
        if(V[median] == target)
            return median;
        else if(V[median] > target){
            if(target < V[s]) {
                return searchV(V, target, median + 1, e);
            } 
            else {
                return searchV(V, target, s, median - 1);
            }            
        }
        else if(V[median] < target){
            if(target > V[e]) {
                return searchV(V, target, s, median - 1);
            } 
            else {
                return searchV(V, target, median + 1, e);
            }         
        }
    }
}

int main(){
    vector<int> V = {4, 5, 6, 7, 0, 1, 2};
    int size = (int)V.size();
    cout << searchV(V, 2, 0, size - 1) << endl;
    return 0;
}