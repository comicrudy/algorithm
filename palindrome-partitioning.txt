#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <functional>
#include <utility>
#include <set>

using namespace std;

/*
Palindrome Partitioning I

Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.
For example, given s = "aab",
Return
  [
    ["aa","b"],
    ["a","a","b"]
  ]
  
  using backtracking
*/
bool palindrome(string& str){
    int size = str.size();
    for(int i = 0; i <= size/2; ++i){
        if(str[i] == str[size-1-i])
            continue;
        else
            return 0;
    }
    return 1;
}

void dfs(vector<vector<string>>& ret, vector<string>& temp, string& str, int k, int size){   
    for(int i = k; i < size; ++i){
        string s = str.substr(k, i - k + 1);
        if(palindrome(s)){
            temp.push_back(str.substr(k, i - k + 1));
            if(i == size -1){
                ret.push_back(temp);
                temp.clear();
            }
            else {
                dfs(ret, temp, str, i + 1, size);
            }
        }
    }
}


vector<vector<string>> palindromePartition(string& str){
    vector<vector<string>> ret;
    vector<string> temp;
    int size = str.size();
    dfs(ret, temp, str, 0, size);
    return ret;
}

int main(){
    string s = "aab";
    vector<vector<string>> ret = palindromePartition(s);
    for(int i = 0; i < (int)ret.size(); ++i){
        for(int j = 0; j < (int)ret[i].size(); ++j){
            cout << ret[i][j] << ' ';
        }
        cout << endl;
    }
    return 0;
}