#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>
#include <string>
#include <queue>

using namespace std;

/*
word ladder

Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary

For example,
Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

sudocode:
bfs

unordered_set<string> dictionary; //store dictionary
queue<string> Q //store temp string for each step bfs
unordered_map<string, int> visited // store visited string in dict

initialize:
start, 1-> visited
start->Q
while(!Q.empty())
 return 0 if empty

for i:start.size()
	for 'a' : 'z'
		if = end
			return step +1
		if = start // skip
		if !in dict // skip
		else 
			step + 1
			new string
			put in Q

			
			
 
*/

int getSteps(string& start, string& end, set<string> &dict){
    if(start == end)
        return 0;
    queue<string> SQ;
    map<string, int> visited = {{start, 0}};
    SQ.push(start);
    while(!SQ.empty()){
        auto curr = SQ.front();
        SQ.pop();
        if(curr == end)
            return visited[curr];
        int step = visited[curr];
        for(int i = 0; i < (int)curr.size(); ++i){
            for(char j = 'a'; j <= 'z'; ++j){
                if(j == curr[i])
                    continue;                
                auto old = curr;
                curr[i] = j;
                if(curr == end)
                    return step + 1;
                else {
                    if(!visited[curr] && dict.count(curr)){
                        SQ.push(curr);
                        visited[curr] = step + 1;
                        
                    }
                }
                curr = old;
            }
        }
    }
    return -1;
}

int main(){
    set<string> dict = {"hot","dot","dog","lot","log"};
    string start = "hit";
    string end = "cog";
    cout << getSteps(start, end, dict) << endl;
}