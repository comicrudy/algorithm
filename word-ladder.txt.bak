#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <string>
#include <queue>

using namespace std;

/*
word ladder

Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary

For example,
Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

sudocode:
bfs

unordered_set<string> dictionary; //store dictionary
queue<string> Q //store temp string for each step bfs
unordered_map<string, int> visited // store visited string in dict

initialize:
start, 1-> visited
start->Q
while(!Q.empty())
 return 0 if empty

for i:start.size()
	for 'a' : 'z'
		if = end
			return step +1
		if = start // skip
		if !in dict // skip
		else 
			step + 1
			new string
			put in Q

			
			
 
*/
int ladderLength(string start, string end, unordered_set<string> &dict) {
    deque<string> q = {start};
    unordered_map<string,int> visited = {{start,1}}; // tracking visited
    
    while(!q.empty()) {
        auto cur = q.front(); 
	q.pop_front(); //use a queue to change the string
        int step = visited[cur];
        
        for(int i = 0; i < (int)start.size(); ++i) { //each time change one char
            for(char c = 'a'; c <= 'z'; ++c) {
                if(cur[i] == c) continue;
                auto old = cur[i];
                cur[i] = c;
                if(cur == end) return step + 1;
                if(dict.count(cur) && !visited.count(cur)) {
                    visited[cur] = step + 1;
                    q.push_back(cur);
                }
                cur[i] = old; //backtracking
            }
        }
    }
    return 0;
}



int main(){
    unordered_set<string> dict;
    dict.insert("hot");
    dict.insert("dot");
    dict.insert("dog");
    dict.insert("lot");
    dict.insert("log");
    string start = "hit";
    string end = "cog";
    cout << ladderLength(start, end, dict) << endl;
    return 0;
}