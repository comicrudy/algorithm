#include <iostream>
#include <unordered_set>
#include <vector>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <memory>
#include <cmath>
#include <string.h>
#include <algorithm>
#include <map>
#include <list>
#include <climits>
#include <set>
#include <queue>


using namespace std;

/*
    array distinct union
*/

vector<int> distinctUnion(auto& V1, auto& V2){
    vector<int> ret{0};
    sort(V1.begin(), V1.end());
    sort(V2.begin(), V2.end());
    for(int i = 0, j = 0; i < (int)V1.size() || j < (int)V2.size();){
//        cout << i << ' ' << j << endl;
        if(V1[i] < V2[j] || j >= (int)V2.size()){
            if(V1[i] != ret.back())
                ret.push_back(V1[i++]);
            else 
                ++i;
        }
        else if(V2[j] < V1[i] || i >= (int)V1.size()){
            if(V2[j] != ret.back())
                ret.push_back(V2[j++]);
            else 
                ++j;
        }
        else if(V1[i] == V2[j] && i < (int)V1.size() && j < (int)V2.size()){
            if(V1[i] != ret.back()){
                ret.push_back(V1[i++]);
                ++j;
            }
            else {
                ++i;  
                ++j;
            }    
        }
    }
    ret.erase(ret.begin());
    return ret;
}

int main(){
    vector<int> V1{1,2,3}, V2{4,5,6}, V3;
    V3 = distinctUnion(V1, V2);
    for(auto& item : V3){
        cout << item << endl;
    }
}

