#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <functional>
#include <utility>
#include <set>

using namespace std;

/*
    Lexicographic rank of a string
Given a string, find its rank among all its permutations sorted lexicographically. 
For example, rank of ¡°abc¡± is 1, rank of ¡°acb¡± is 2, and rank of ¡°cba¡± is 6.
*/

int factoral(int n){
    int ret = 1;
    if(n == 0)
        return 0;
    else{
        for(int i = 1; i <= n; ++i){
            ret *= i;
        }
        
    }
    return ret;
}

int rankPermutation(string& str){
    int size = str.size();
    int total = 0;
    set<char> S(str.begin(), str.end());
    for(int i = 0; i < size; ++i){
        auto it = S.find(str[i]);
        total += (it - S.begin())*factoral(size - 1 - i);
    }
    return total;
}

int main(){
    string s = "string";
    cout << rankPermutation(s) << endl;
    return 0;
}