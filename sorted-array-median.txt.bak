#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <functional>
#include <utility>
#include <set>

using namespace std;

/*
    1. Median of two sorted array;
*/

double median(vector<int>& V1, vector<int>& V2){
    int size1 = V1.size(), size2 = V2.size(), count = 0, i = 0 , j = 0;
    bool flag = 0;
    double median = -1;
    if(size1 == 0 && size2 == 0)
        return -1;
    else if(size1 == 0){
        if(size2%2 == 1){
            median = V2[(size2/2) + 1];
        }
        else if(size2%2 == 0){
            median = (V2[size2/2] + V2[size2/2 + 1]) / 2;
        }
    }
    else if(size2 == 0){
        if(size1%2 == 1){
            median = V1[(size1/2) + 1];
        }
        else if(size1%2 == 0){
            median = (V1[size1/2] + V1[size1/2 + 1]) / 2;
        }
    }
    else {
        if((size1 + size2) % 2 == 1){
            count = (size1 + size2)/2 + 1;
            while(i < size1 || j < size2){
                if((i + j) == count - 2){
                    median = flag ? V2[j] : V1[i];
                    break;
                }
                else if(V1[i] < V2[j]){
                    if(i < size1){
                        flag = 0;
                        ++i;
                    }
                    else {
                        flag = 1;
                        ++j;
                    }
                }
                else if(V1[i] > V2[j]){
                    if(j < size2){
                        flag = 1;
                        ++j;
                    }
                    else {
                        flag = 0;
                        ++j;
                    }
                }
                else { //V1[i] == V2[j]
                    if(i < size1){
                        ++i;
                        flag = 0;
                    }
                    else {
                        ++j;
                        flag = 1;
                    }
                }
            }
        }
        else if((size1 + size2) % 2 == 0){
            count = (size1 + size2)/2;
            while(i < size1 || j < size2){
                if((i + j) == count - 2){
                    median = flag ? V2[j] : V1[i];
                    if(V1[i] < V2[j]){
                        if(i < size1)
                            median = (median + V1[i+1]) /2;
                        else
                            median = (median + V2[j+1]) /2;
                        break;
                    }
                    else if(V1[i] > V2[j]){
                        if(j < size2)
                            median = (median + V2[j+1]) /2;
                        else
                            median = (median + V1[i+1]) /2;
                        break;
                    }                    
                }
                else if(V1[i] < V2[j]){
                    if(i < size1){
                        flag = 0;
                        ++i;
                    }
                    else {
                        flag = 1;
                        ++j;
                    }
                }
                else if(V1[i] > V2[j]){
                    if(j < size2){
                        flag = 1;
                        ++j;
                    }
                    else {
                        flag = 0;
                        ++j;
                    }
                }
                else { //V1[i] == V2[j]
                    if(i < size1){
                        ++i;
                        flag = 0;
                    }
                    else {
                        ++j;
                        flag = 1;
                    }
                }
            }            
        }
            
    }
    return median;
}

int main(){
    vector<int> V1 = {1,2,3,4,7};
    vector<int> V2 = {5,6,8,9,10};
    cout << median(V1, V2) << endl;
    return 0;
}