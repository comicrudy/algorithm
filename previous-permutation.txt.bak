#include <iostream>
#include <unordered_set>
#include <vector>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <memory>
#include <cmath>
#include <string.h>
#include <algorithm>
#include <map>
#include <list>
#include <climits>


using namespace std;

/*
 Given a list of integers, which denote a permutation.

Find the previous permutation in ascending order.

Note
The list may contains duplicate integers.

Example
For [1,3,2,3], the previous permutation is [1,2,3,3]

For [1,2,3,4], the previous permutation is [4,3,2,1]

*/

vector<int> lastPermutation(const vector<int>& Input){
    vector<int> ret = Input;
    int size = (int)Input.size(), start = -1;
    for(int i = size - 2; i >= 0; --i){
        if(Input[i] > Input[i + 1]){
            start = i;
            break;
        }
    }
    for(int i = start + 1; i < size; ++i){
        if(Input[start] <= Input[i]){
            swap(ret[start], ret[i - 1]);
            break;
        }
        if(i == size - 1){
            swap(ret[start], ret[size - 1]);
        }
    }
    sort(ret.begin() + start + 1, ret.end(), std::greater<int>());
    return ret;
}

int main(){
    vector<int> Input = {1,4,3,2};
    vector<int> ret = lastPermutation(Input);
    for(auto item : ret){
        cout << item << endl;
    }
}