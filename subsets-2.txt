#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <unordered_map>
#include <stdio.h>
#include <string.h>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <functional>
#include <utility>
#include <set>


using namespace std;

/*
    subsets 2
Given a collection of integers that might contain duplicates, S, return all possible subsets.
Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
*/



set<vector<int>> subsets(vector<int>& S){
    set<vector<int>> ret, ret1;
    vector<int> temp;
    ret.insert(vector<int> {});
    ret1 = ret;
    cout << ret.size() << endl;
    for(int i = 0; i < (int)S.size(); ++i){
//        int size =  (int)ret.size();
//        auto it_end = ret.end();
        for(auto it = ret.begin(); it != ret.end(); ++it){
            temp = *it;
            temp.push_back(S[i]);
//            cout << S[i] << endl;
            if(ret.count(temp)){
                continue;
            }
            else {
                ret1.insert(temp);
            }
        }
        ret = ret1;
//        cout << ret.size() << endl;
    }
    return ret;
}

int main(){
    vector<int> S = {1,2,2};
    set<vector<int>> V = subsets(S);
    for(auto it = V.begin(); it != V.end(); ++it){
        for(int j = 0; j < (int)(*it).size(); ++j){
            cout << (*it)[j] << ' ';
        }
        cout << endl;
    }
    return 0;
}